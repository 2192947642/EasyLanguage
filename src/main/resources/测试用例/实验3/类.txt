#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <string.h>

// 定义最大消息大小为 1024 字节，消息类型为 2
#define MAX_MSG_SIZE 1024
#define MSG_TYPE 2

// 定义消息结构体，包含消息类型和消息内容
struct msg_buffer {
    long msg_type;
    char msg_text[MAX_MSG_SIZE];
};

// 判断输入是否为"quit"的函数
int isQuit(char *p) {
    // 如果输入字符串的前四个字符分别为'q'、'u'、'i'、't'，则返回 1，表示是退出指令
    if (p[0] == 'q' && p[1] == 'u' && p[2] == 'i' && p[3] == 't') {
        return 1;
    }
    return 0;
}

int main() {
    int queueId; // 消息队列标识符
    struct msg_buffer message;

    // 设置消息的类型为 MSG_TYPE（值为 2）
    message.msg_type = MSG_TYPE;

    // 创建一个消息队列，如果不存在则创建，否则打开
    // 使用键值 12345，权限标志为 IPC_CREAT|400（具体权限可根据需求调整）
    if ((queueId = msgget(12345, IPC_CREAT|400)) == -1) {
        perror("msgget"); // 如果创建或打开消息队列失败，打印错误信息
        exit(1);
    }

    // 开始聊天循环
    while (1) {
        printf("\nawait receive\n");
        // 从消息队列接收消息，消息类型为 1
        msgrcv(queueId, &message, sizeof(message.msg_text), 1, 0);
        printf("receive: %s", message.msg_text);
        // 设置消息类型为 2
        message.msg_type = 2;
        printf("input:");
    
        // 从标准输入读取一行字符串存入 message.msg_text 中
        fgets(message.msg_text, sizeof(message.msg_text), stdin);

        // 判断输入是否为"quit"，如果是则退出循环
        if (isQuit(message.msg_text)) {
            printf("\n聊天结束。\n");
            // 关闭和删除消息队列
            msgctl(queueId, IPC_RMID, 0);
            break;
        }
        // 发送消息到消息队列
        msgsnd(queueId, &message, sizeof(message.msg_text), 0);
    }

    // 在实际应用中，确保正确地关闭和删除消息队列
    msgctl(queueId, IPC_RMID, 0);
    return 0;
}